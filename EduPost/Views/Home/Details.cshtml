@model EduPost.Models.Article

@{
	ViewData["Title"] = "Details";
}

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<link rel="apple-touch-icon" sizes="76x76" href="./assets/img/favicon.ico">
	<link rel="icon" type="image/png" href="./assets/img/favicon.ico">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
	<title>Mundana Template by WowThemesNet</title>
	<meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no' name='viewport' />
	<!-- Google Font -->
	<link href="https://fonts.googleapis.com/css?family=Playfair+Display:400,700|Source+Sans+Pro:400,700" rel="stylesheet">
	<!-- Font Awesome Icons -->
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css" integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU" crossorigin="anonymous">
	<!-- Main CSS -->
	<link href="~/mundana/assets/css/main.css" rel="stylesheet" />
</head>
<body style="margin: 0; padding: 0;">
	<!--------------------------------------
	NAVBAR
	--------------------------------------->
	
	<!-- End Navbar -->
	<!--------------------------------------
	HEADER
	--------------------------------------->
	<div class="container">
		<div class="jumbotron jumbotron-fluid mb-3 pl-0 pt-0 pb-0 bg-white position-relative">
			<div class="h-100 tofront">

				<h1 class="display-4 secondfont mb-3 font-weight-bold" style="width:100%">@Model.ArticleTitle</h1>
				<div class="d-flex align-items-center">
					<img class="rounded-circle" src="~/mundana/assets/img/demo/avatar2.jpg" width="70">
					<small class="ml-2">
						@ViewBag.CreatorUsername <span class="text-muted d-block">@Model.CreatedDate?.ToString("dd/MM/yyyy HH:mm:ss")</span>
					</small>
				</div>
			</div>
		</div>
	</div>
	<!-- End Header -->
	<!--------------------------------------
	MAIN
	--------------------------------------->
	<div class="container pt-4 pb-4">
		<div class="row justify-content-center">	
			<div class="col-md-12 col-lg-8">
				<article class="article-post" style="background-color:white">
					<p>
						@Model.Description
					</p>
				</article>
				<div class="border p-5 bg-lightblue">
					<h4>Documments com with this article:</h4>
					@if (Model.Files != null && Model.Files.Any())
					{
						<table class="table">
							<thead>
								<tr>
									<th>File name</th>
									<th></th>
								</tr>
							</thead>
							<tbody>

								@foreach (var file in Model.Files)
								{
									<tr>
										<td>@file.FileName</td>
									</tr>
								}
							</tbody>
						</table>
					}
					else
					{
						<p>No file was uploaded.</p>
					}
				</div>				
			</div>
		</div>
	</div>

	<div class="d-flex" style="width:auto">
		<div class="d-flex flex-column" style="width:110px">
			<button id="likeButton" class="btn btn-primary" data-article-id="@Model.ArticleId">
				<i class="fas fa-thumbs-up"></i> Like
            </button>
			<span id="likeCount" style="width:110px"></span> likes
		</div>

		<div class="d-flex flex-column" style="width:110px; margin-left: 5px">
			<button id="dislikeButton" class="btn btn-primary" data-article-id="@Model.ArticleId">
				<i class="fas fa-thumbs-down"></i> Dislike
			</button>
			<span id="dislikeCount" style="width:110px"></span> dislikes
		</div>
	</div>

	<div>
		<span id="userReaction" class="text-muted"></span>
    </div>

	<div class="container pt-4 pb-4">
		<h5 class="font-weight-bold spanborder"><span>Comments</span></h5>
		<div class="row">
			<div class="comments-section">
				@if (Model.Comments != null && Model.Comments.Any())
				{
					<ul>
						@foreach (var comment in Model.Comments)
						{
							<li>
								<strong>@comment.CreatedDate.ToString("dd MMM yyyy"): </strong>@comment.Content
								<br>
								<em>Posted by: @(comment.UserId.HasValue && ViewBag.Usernames.ContainsKey(comment.UserId.Value) ? ViewBag.Usernames[comment.UserId.Value] : "Unknown User")</em>
								@{
									var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
									int currentUserIdInt;
									bool isCurrentUser = int.TryParse(currentUserId, out currentUserIdInt) && comment.UserId.HasValue && comment.UserId.Value == currentUserIdInt;

									if (User.Identity.IsAuthenticated && isCurrentUser)
									{
										<form asp-action="DeleteComment" asp-controller="Home" method="post" class="delete-comment-form">
											<input type="hidden" name="commentId" value="@comment.CommentId" />
											<button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this comment?');">Delete Comment</button>
										</form>
									}
								}
							</li>
						}
					</ul>
				}
				else
				{
					<p>No comments to display.</p>
				}
			</div>

			<h4>Give your comment here:</h4>
			<div class="form-group">
				<form asp-action="AddComment" asp-controller="Home" method="post" class="comment-form">
					<input type="hidden" name="ArticleId" value="@Model.ArticleId" />
					<textarea name="Content" required class="form-control comment-textarea"></textarea>
					<button type="submit" class="btn btn-primary submit-comment-btn" style="margin-top:7px">Post Comment</button>
				</form>
			</div>

		</div>
	</div>
	<!-- End Main -->
	<!--------------------------------------
	FOOTER
	--------------------------------------->

	<!-- End Footer -->
	<!--------------------------------------
	JAVASCRIPTS
	--------------------------------------->
	<script src="~/mundana/assets/js/vendor/jquery.min.js" type="text/javascript"></script>
	<script src="~/mundana/assets/js/vendor/popper.min.js" type="text/javascript"></script>
	<script src="~/mundana/assets/js/vendor/bootstrap.min.js" type="text/javascript"></script>
	<script src="~/mundana/assets/js/functions.js" type="text/javascript"></script>
	@section Scripts {
		<script>
			function checkUserReaction(articleId) {
				$.ajax({
					url: '@Url.Action("GetUserReaction", "Articles")',
					data: { articleId: articleId },
					success: function (response) {
						if (response.success) {
							if (response.isLike !== null) {
								if (response.isLike) {
									$('#likeButton').addClass('liked').removeClass('disliked');
									$('#dislikeButton').removeClass('liked').removeClass('disliked');
								} else {
									$('#dislikeButton').addClass('disliked').removeClass('liked');
									$('#likeButton').removeClass('disliked').removeClass('liked');
								}
							}

							if (response.isLike !== undefined) {
								if (response.isLike) {
									$('#userReaction').text('You liked this article.');
								} else {
									$('#userReaction').text('You disliked this article.');
								}
							} if (response.message) {
								$('#userReaction').text(response.message);
							}
						} else {
							console.error(response.message);
						}
					},
					error: function () {
						console.error("Error fetching user reaction.");
					}
				});
			}

			function postReaction(isLike, articleId) {
				var actionUrl = isLike ? '@Url.Action("LikeArticle", "Articles")' : '@Url.Action("DislikeArticle", "Articles")';
				$.ajax({
					url: actionUrl,
					type: 'POST',
					data: { articleId: articleId },
					success: function (response) {
						if (isLike) {
							$('#likeButton').addClass('liked').removeClass('disliked');
							$('#dislikeButton').removeClass('liked').removeClass('disliked');
						} else {
							$('#dislikeButton').addClass('disliked').removeClass('liked');
							$('#likeButton').removeClass('disliked').removeClass('liked');
						}
						checkUserReaction(articleId);
						getArticleReactionCounts(articleId);
					}
				});
			}

			function getArticleReactionCounts(articleId) {
				$.ajax({
					url: '@Url.Action("GetArticleReactionCounts", "Articles")',
					data: { articleId: articleId },
					success: function (response) {
						if (response.success) {
							$('#likeCount').text(response.likeCount);
							$('#dislikeCount').text(response.dislikeCount);
						} else {
							console.error(response.message);
						}
					},
					error: function () {
						console.error("Error fetching article reaction counts.");
					}
				});
			}

			$(document).ready(function () {
				var articleId = $('#likeButton').data('article-id');
				checkUserReaction(articleId);
				getArticleReactionCounts(articleId);

				$("#likeButton").click(function (e) {
					e.preventDefault();
					postReaction(true, articleId);
				});

				$("#dislikeButton").click(function (e) {
					e.preventDefault();
					postReaction(false, articleId);
				});
			});
		</script>
	}

</body>
</html>